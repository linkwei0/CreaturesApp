//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var creatureList: creatureList { .init(source: .init(bundle: bundle, tableName: "CreatureList", preferredLanguages: preferredLanguages, locale: locale)) }

    func creatureList(preferredLanguages: [String]) -> creatureList {
      .init(source: .init(bundle: bundle, tableName: "CreatureList", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.creatureList` struct is generated, and contains static references to 8 localization keys.
    struct creatureList {
      let source: RswiftResources.StringResource.Source

      /// en translation: СОТВОРИТЬ
      ///
      /// Key: creature.button.create.title
      ///
      /// Locales: en
      var creatureButtonCreateTitle: RswiftResources.StringResource { .init(key: "creature.button.create.title", tableName: "CreatureList", source: source, developmentValue: "СОТВОРИТЬ", comment: nil) }

      /// en translation: Клеточное наполнение
      ///
      /// Key: creature.list.title
      ///
      /// Locales: en
      var creatureListTitle: RswiftResources.StringResource { .init(key: "creature.list.title", tableName: "CreatureList", source: source, developmentValue: "Клеточное наполнение", comment: nil) }

      /// en translation: и шевелится!
      ///
      /// Key: creature.type.alive.description
      ///
      /// Locales: en
      var creatureTypeAliveDescription: RswiftResources.StringResource { .init(key: "creature.type.alive.description", tableName: "CreatureList", source: source, developmentValue: "и шевелится!", comment: nil) }

      /// en translation: Живая
      ///
      /// Key: creature.type.alive.status
      ///
      /// Locales: en
      var creatureTypeAliveStatus: RswiftResources.StringResource { .init(key: "creature.type.alive.status", tableName: "CreatureList", source: source, developmentValue: "Живая", comment: nil) }

      /// en translation: ку-ку!
      ///
      /// Key: creature.type.baby.description
      ///
      /// Locales: en
      var creatureTypeBabyDescription: RswiftResources.StringResource { .init(key: "creature.type.baby.description", tableName: "CreatureList", source: source, developmentValue: "ку-ку!", comment: nil) }

      /// en translation: Жизнь
      ///
      /// Key: creature.type.baby.status
      ///
      /// Locales: en
      var creatureTypeBabyStatus: RswiftResources.StringResource { .init(key: "creature.type.baby.status", tableName: "CreatureList", source: source, developmentValue: "Жизнь", comment: nil) }

      /// en translation: или прикидывается
      ///
      /// Key: creature.type.dead.description
      ///
      /// Locales: en
      var creatureTypeDeadDescription: RswiftResources.StringResource { .init(key: "creature.type.dead.description", tableName: "CreatureList", source: source, developmentValue: "или прикидывается", comment: nil) }

      /// en translation: Мертвая
      ///
      /// Key: creature.type.dead.status
      ///
      /// Locales: en
      var creatureTypeDeadStatus: RswiftResources.StringResource { .init(key: "creature.type.dead.status", tableName: "CreatureList", source: source, developmentValue: "Мертвая", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 11 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `accentBtn`.
    var accentBtn: RswiftResources.ColorResource { .init(name: "accentBtn", path: [], bundle: bundle) }

    /// Color `accentCyan`.
    var accentCyan: RswiftResources.ColorResource { .init(name: "accentCyan", path: [], bundle: bundle) }

    /// Color `accentCyanLight`.
    var accentCyanLight: RswiftResources.ColorResource { .init(name: "accentCyanLight", path: [], bundle: bundle) }

    /// Color `accentOrange`.
    var accentOrange: RswiftResources.ColorResource { .init(name: "accentOrange", path: [], bundle: bundle) }

    /// Color `accentOrangeLight`.
    var accentOrangeLight: RswiftResources.ColorResource { .init(name: "accentOrangeLight", path: [], bundle: bundle) }

    /// Color `accentPurple`.
    var accentPurple: RswiftResources.ColorResource { .init(name: "accentPurple", path: [], bundle: bundle) }

    /// Color `accentPurpleDark`.
    var accentPurpleDark: RswiftResources.ColorResource { .init(name: "accentPurpleDark", path: [], bundle: bundle) }

    /// Color `accentPurpleLight`.
    var accentPurpleLight: RswiftResources.ColorResource { .init(name: "accentPurpleLight", path: [], bundle: bundle) }

    /// Color `baseBlack`.
    var baseBlack: RswiftResources.ColorResource { .init(name: "baseBlack", path: [], bundle: bundle) }

    /// Color `baseWhite`.
    var baseWhite: RswiftResources.ColorResource { .init(name: "baseWhite", path: [], bundle: bundle) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Roboto-Bold`.
    var robotoBold: RswiftResources.FontResource { .init(name: "Roboto-Bold", bundle: bundle, filename: "Roboto-Bold.ttf") }

    /// Font `Roboto-Regular`.
    var robotoRegular: RswiftResources.FontResource { .init(name: "Roboto-Regular", bundle: bundle, filename: "Roboto-Regular.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [robotoBold, robotoRegular].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 2 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Roboto-Bold.ttf`.
    var robotoBoldTtf: RswiftResources.FileResource { .init(name: "Roboto-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Regular.ttf`.
    var robotoRegularTtf: RswiftResources.FileResource { .init(name: "Roboto-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}